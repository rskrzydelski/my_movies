{"ast":null,"code":"export const get = (url, header) => new Promise((resolve, reject) => {\n  fetch(url).then(response => response.json()).then(json => resolve(json)).catch();\n});\n\nconst apiCall = (url, method, body, resolve, reject) => fetch(url, {\n  method: method,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8' //   'Authorization': 'Token ' + localStorage.getItem('token')\n\n  },\n  body: JSON.stringify(body)\n}).then(response => {\n  response.json().then(json => resolve(json));\n}).catch(error => console.error(error));\n\nexport const post = (url, body) => new Promise((resolve, reject) => apiCall(url, 'POST', body, resolve, reject));","map":{"version":3,"sources":["/Users/rafalskrzydelski/development/react/movies/src/api_helper/api.js"],"names":["get","url","header","Promise","resolve","reject","fetch","then","response","json","catch","apiCall","method","body","headers","JSON","stringify","error","console","post"],"mappings":"AAAA,OAAO,MAAMA,GAAG,GAAG,CAACC,GAAD,EAAMC,MAAN,KACjB,IAAIC,OAAJ,CACE,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnBC,EAAAA,KAAK,CAACL,GAAD,CAAL,CACGM,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQE,IAAI,IAAIL,OAAO,CAACK,IAAD,CAFvB,EAE+BC,KAF/B;AAGD,CALH,CADK;;AASP,MAAMC,OAAO,GAAG,CAACV,GAAD,EAAMW,MAAN,EAAcC,IAAd,EAAoBT,OAApB,EAA6BC,MAA7B,KACdC,KAAK,CAACL,GAAD,EAAM;AACTW,EAAAA,MAAM,EAAEA,MADC;AAETE,EAAAA,OAAO,EAAE;AACH,oBAAgB,iCADb,CAEL;;AAFK,GAFA;AAMPD,EAAAA,IAAI,EAAEE,IAAI,CAACC,SAAL,CAAeH,IAAf;AANC,CAAN,CAAL,CAOGN,IAPH,CAOQC,QAAQ,IAAI;AAChBA,EAAAA,QAAQ,CAACC,IAAT,GACCF,IADD,CACME,IAAI,IAAIL,OAAO,CAACK,IAAD,CADrB;AAEH,CAVD,EAUGC,KAVH,CAUUO,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAVnB,CADF;;AAaE,OAAO,MAAME,IAAI,GAAG,CAAClB,GAAD,EAAMY,IAAN,KAClB,IAAIV,OAAJ,CACI,CAACC,OAAD,EAAUC,MAAV,KAAqBM,OAAO,CAACV,GAAD,EAAM,MAAN,EAAcY,IAAd,EAAoBT,OAApB,EAA6BC,MAA7B,CADhC,CADK","sourcesContent":["export const get = (url, header) =>\n  new Promise(\n    (resolve, reject) => {\n      fetch(url, )\n        .then(response => response.json())\n        .then(json => resolve(json)).catch()\n    }\n  )\n\nconst apiCall = (url, method, body, resolve, reject) =>\n  fetch(url, {\n    method: method,\n    headers: {\n          'Content-Type': 'application/json; charset=utf-8'\n        //   'Authorization': 'Token ' + localStorage.getItem('token')\n      },\n      body: JSON.stringify(body)\n  }).then(response => {\n      response.json()\n      .then(json => resolve(json))\n  }).catch( error => console.error(error))\n\n  export const post = (url, body) =>\n    new Promise(\n        (resolve, reject) => apiCall(url, 'POST', body, resolve, reject)\n    )\n"]},"metadata":{},"sourceType":"module"}