{"ast":null,"code":"export const get = (url, header) => new Promise((resolve, reject) => {\n  fetch(url, {\n    headers: {\n      'Authorization': 'Token ' + localStorage.token\n    }\n  }).then(response => response.json()).then(json => resolve(json)).catch();\n});\n\nconst apiCall = (url, method, body, resolve, reject) => fetch(url, {\n  method: method,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  },\n  body: JSON.stringify(body)\n}).then(response => {\n  response.json().then(json => resolve(json));\n}).catch(error => console.error(error));\n\nexport const post = (url, body) => new Promise((resolve, reject) => apiCall(url, 'POST', body, resolve, reject));\n\nconst authApiCall = (url, method, body, resolve, reject) => fetch(url, {\n  method: method,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8',\n    'Authorization': 'Token ' + localStorage.token\n  },\n  body: JSON.stringify(body)\n}).then(response => {\n  response.json().then(json => resolve(json));\n}).catch(error => console.error(error));\n\nexport const authPost = (url, body) => new Promise((resolve, reject) => authApiCall(url, 'POST', body, resolve, reject));\nexport const authDelete = (url, body) => new Promise((resolve, reject) => fetch(url, {\n  method: method,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8',\n    'Authorization': 'Token ' + localStorage.token\n  },\n  body: JSON.stringify(body)\n}).then(response => {\n  response.json().then(json => resolve(json));\n}).catch(error => console.error(error)));","map":{"version":3,"sources":["/Users/rafalskrzydelski/development/react/movies/src/api_helper/api.js"],"names":["get","url","header","Promise","resolve","reject","fetch","headers","localStorage","token","then","response","json","catch","apiCall","method","body","JSON","stringify","error","console","post","authApiCall","authPost","authDelete"],"mappings":"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","sourcesContent":["export const get = (url, header) =>\n  new Promise(\n    (resolve, reject) => {\n      fetch(url, {\n          headers: {\n              'Authorization': 'Token ' + localStorage.token\n          },\n    })\n        .then(response => response.json())\n        .then(json => resolve(json)).catch()\n    }\n  )\n\nconst apiCall = (url, method, body, resolve, reject) =>\n  fetch(url, {\n    method: method,\n    headers: {\n          'Content-Type': 'application/json; charset=utf-8'\n      },\n      body: JSON.stringify(body)\n  }).then(response => {\n      response.json()\n      .then(json => resolve(json))\n  }).catch( error => console.error(error))\n\nexport const post = (url, body) =>\n  new Promise(\n    (resolve, reject) => apiCall(url, 'POST', body, resolve, reject)\n)\n\nconst authApiCall = (url, method, body, resolve, reject) =>\n  fetch(url, {\n    method: method,\n    headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          'Authorization': 'Token ' + localStorage.token\n      },\n      body: JSON.stringify(body)\n  }).then(response => {\n      response.json()\n      .then(json => resolve(json))\n  }).catch( error => console.error(error))\n\nexport const authPost = (url, body) =>\n  new Promise(\n    (resolve, reject) => authApiCall(url, 'POST', body, resolve, reject)\n  )\n\nexport const authDelete = (url, body) =>\n  new Promise(\n    (resolve, reject) =>   fetch(url, {\n        method: method,\n        headers: {\n              'Content-Type': 'application/json; charset=utf-8',\n              'Authorization': 'Token ' + localStorage.token\n          },\n          body: JSON.stringify(body)\n      }).then(response => {\n          response.json()\n          .then(json => resolve(json))\n      }).catch( error => console.error(error))\n    \n  )\n"]},"metadata":{},"sourceType":"module"}