{"ast":null,"code":"export const get = (url, headers) => new Promise((resolve, reject) => {\n  fetch(url, {\n    headers: {\n      'Authorization': 'Token ' + localStorage.token\n    }\n  }).then(response => response.json()).then(json => resolve(json)).catch();\n});\n\nconst apiCall = (url, method, body, resolve, reject) => fetch(url, {\n  method: method,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  },\n  body: JSON.stringify(body)\n}).then(response => {\n  response.json().then(json => resolve(json));\n}).catch(error => console.error(error));\n\nexport const post = (url, body) => new Promise((resolve, reject) => apiCall(url, 'POST', body, resolve, reject));","map":{"version":3,"sources":["/Users/rafalskrzydelski/development/react/movies/src/api_helper/api.js"],"names":["get","url","headers","Promise","resolve","reject","fetch","localStorage","token","then","response","json","catch","apiCall","method","body","JSON","stringify","error","console","post"],"mappings":"AAAA,OAAO,MAAMA,GAAG,GAAG,CAACC,GAAD,EAAMC,OAAN,KACjB,IAAIC,OAAJ,CACE,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACjBC,EAAAA,KAAK,CAACL,GAAD,EAAM;AACPC,IAAAA,OAAO,EAAE;AACL,uBAAiB,WAAWK,YAAY,CAACC;AADpC;AADF,GAAN,CAAL,CAKCC,IALD,CAKMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALlB,EAMCF,IAND,CAMME,IAAI,IAAIP,OAAO,CAACO,IAAD,CANrB,EAM6BC,KAN7B;AAOH,CATH,CADK;;AAaP,MAAMC,OAAO,GAAG,CAACZ,GAAD,EAAMa,MAAN,EAAcC,IAAd,EAAoBX,OAApB,EAA6BC,MAA7B,KACdC,KAAK,CAACL,GAAD,EAAM;AACTa,EAAAA,MAAM,EAAEA,MADC;AAETZ,EAAAA,OAAO,EAAE;AACH,oBAAgB;AADb,GAFA;AAKPa,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeF,IAAf;AALC,CAAN,CAAL,CAMGN,IANH,CAMQC,QAAQ,IAAI;AAChBA,EAAAA,QAAQ,CAACC,IAAT,GACCF,IADD,CACME,IAAI,IAAIP,OAAO,CAACO,IAAD,CADrB;AAEH,CATD,EASGC,KATH,CASUM,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CATnB,CADF;;AAYE,OAAO,MAAME,IAAI,GAAG,CAACnB,GAAD,EAAMc,IAAN,KAClB,IAAIZ,OAAJ,CACI,CAACC,OAAD,EAAUC,MAAV,KAAqBQ,OAAO,CAACZ,GAAD,EAAM,MAAN,EAAcc,IAAd,EAAoBX,OAApB,EAA6BC,MAA7B,CADhC,CADK","sourcesContent":["export const get = (url, headers) =>\n  new Promise(\n    (resolve, reject) => {\n        fetch(url, {\n            headers: {\n                'Authorization': 'Token ' + localStorage.token\n            }\n        })\n        .then(response => response.json())\n        .then(json => resolve(json)).catch()\n    }\n  )\n\nconst apiCall = (url, method, body, resolve, reject) =>\n  fetch(url, {\n    method: method,\n    headers: {\n          'Content-Type': 'application/json; charset=utf-8'\n      },\n      body: JSON.stringify(body)\n  }).then(response => {\n      response.json()\n      .then(json => resolve(json))\n  }).catch( error => console.error(error))\n\n  export const post = (url, body) =>\n    new Promise(\n        (resolve, reject) => apiCall(url, 'POST', body, resolve, reject)\n    )\n"]},"metadata":{},"sourceType":"module"}